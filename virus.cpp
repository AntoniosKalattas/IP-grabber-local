//111111111111111111111111111111111111111111111111111111111
//111111111111111111111111111111111¶¶¶111111111111111111111
//111111111111111111111111111111¶¶¶¶11111111111111111111111
//1111111111111111111111111111¶¶¶¶1111111111111111111111111
//11111111111111111111111111¶¶¶¶¶¶1111111111111111111111111
//111111111111111111111111¶¶¶¶¶¶1111¶¶¶11¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶111
//111111111111111¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶111111111
//11111111111111111¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶111111111111
//11111111111111111111¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶1111
//1111111111111111¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶1111111111
//111111111111111¶¶¶111¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶1111111
//111111111111¶¶¶¶¶11¶¶¶¶¶¶¶¶¶¶¶11¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶111111
//11111111111¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶1¶¶1111¶¶¶¶¶¶¶¶¶¶¶¶¶11¶¶¶¶¶1111
//1111111¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶111¶11111¶¶¶¶¶¶¶¶¶¶¶¶¶111¶¶¶¶111
//11111¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶111111111¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶1111¶¶¶11
//1111¶¶¶¶¶¶¶¶111111111111111111111¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶11111¶¶1
//11111¶¶¶¶¶111111111111111111111¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶11111111
//1111111¶1111111111111111111¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶1111111
//1111111111111¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶1111111
//111111111111111¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶11¶¶¶¶¶1111111
//11111111111¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶1111¶¶¶¶¶1111111
//11111111¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶111111¶¶¶¶1111111
//111111¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶111111111¶¶¶¶1111111
//1111¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶11111111111¶¶¶¶1111111
//111¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶111¶¶¶¶¶¶111111111111111¶¶¶11111111
//11¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶1111111111111111111111111111¶¶111111111
//1¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶11111111111111111¶¶1111111111111111111111
//¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶111111111111111111111¶¶¶¶11111111111111111
//¶¶¶¶¶¶¶¶¶¶1¶¶¶111111111111111111111111¶¶¶¶¶11111111111111
//¶¶¶¶¶¶¶¶¶¶11¶¶11111111111111111111111111¶¶¶¶¶¶¶1111111111
//¶¶¶¶¶¶¶¶¶¶¶111¶111111111111¶¶¶11111¶¶¶¶111¶¶¶¶¶¶¶11111111
//¶¶¶¶¶¶¶¶¶¶¶¶11111111111111111¶¶¶11111¶¶¶¶¶¶¶¶¶¶¶¶¶¶111111
//¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶11111111111111¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶1111
//¶1¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶111111111¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶11
//¶¶11¶¶¶¶¶¶¶¶¶¶¶¶111111111¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶111¶¶¶¶¶¶¶¶¶¶¶¶1
//1¶11¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶11111111111¶¶¶¶¶¶¶¶
//1111¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶11111111111111¶¶¶¶¶¶
//1111¶¶¶¶¶1¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶¶11¶¶¶¶¶¶¶¶11111111111111¶¶¶¶¶
//11111¶¶¶11111¶¶¶¶¶¶¶¶¶¶¶¶¶11111¶¶¶¶¶¶¶¶¶¶11111111111111¶¶
//1111¶¶¶11111111¶¶¶1¶¶¶¶¶¶¶¶¶11111¶¶¶¶¶11111111111111111¶¶
//1111¶¶¶111111111111111¶¶¶¶¶¶¶1111111¶¶¶¶¶¶¶¶111111111111¶
//11111¶¶1111111111111111111¶¶¶¶¶1111111111111111111111111¶
//111111¶11111111111111111111¶¶¶¶11111111111111111111111111
//1111111111111111111111111111¶¶¶11111111111111111111111111
//11111111111111111111111111111¶¶11111111111111111111111111
//111111111111111111111111111111111111111111111111111111111
//111111111111111111111111111111111111111111111111111111111
//



#include<iostream>
#include<vector>
#include<fstream>
#include<string>
//#include<Windows.h>
#include <unistd.h>
#include <cstdlib>

#define GREEN "\033[32m"
using namespace std;

string ip_grab_local(string file);
string ip_grab_global();


int main(){
    int x=1;
    ofstream fout("ips_local.txt");
    ofstream out1("global.txt");
    string command="ipconfig", file="result.txt",ip_local,ip_global;
    system((command+">"+ file).c_str());
    ip_global=ip_grab_global();
    ip_local =ip_grab_local(file);
    cout<<"ok";
    cout<<ip_global;

    fout<<x<<"Local: "<<ip_local<<" "<<ip_global;
    //sleep(3);
    fout.close();
    //out1<<x<<"Global: "<<ip_global;
    //out1.close();
    cout<<GREEN<<"done"<<endl;
    x++;   
}

string ip_grab_local(string file){
    string ip;
    ifstream fin(file);
    string a;
    int x=0;
    while(!fin.eof()){
        getline(fin,a);
        for(int i=0;i<a.size();i++){
        if(a[i]=='I' && a[i+1]=='P' && a[i+2]=='v' && a[i+3]=='4'){
            x=i+36;
            while(a[x]!='\0'){
                ip+=a[x];
                x++;
            }
            ip+=" - ";
        }         
    }

    }
    string command="nslookup myip.opendns.com resolver1.opendns.com",file1="global1.txt",ip1,b;
    x=0;
    int found=0;
    system((command+">"+ file).c_str());
    ifstream fin1(file);
    while(!fin1.eof()){
        getline(fin1,b);
        for(int i=0;i<b.size();i++){
            
            if(b[i]=='A' && b[i+1]=='d' && b[i+2]=='d' && b[i+3]=='r' && b[i+4]=='e'){
                found+=1;
            }
            if(found==2){
                if(b[i]=='A'){
                    x=i+9;
                while(b[x]!='\0'){
                    ip1+=b[x];
                    x++;
                }
                ip1+=" - ";
                }
            }         
        }
    }
    return ip+"- global: "+ip1;
}

string ip_grab_global(){
    string command="nslookup myip.opendns.com resolver1.opendns.com",file="global.txt",ip1,a;
    int x;
    int found=0;
    system((command+">"+ file).c_str());
    ifstream fin(file);
    while(!fin.eof()){
        getline(fin,a);
        for(int i=0;i<a.size();i++){
            
            if(a[i]=='A' && a[i+1]=='d' && a[i+2]=='d' && a[i+3]=='r' && a[i+4]=='e'){
                found+=1;
            }
            if(found==2){
                if(a[i]=='A'){
                    x=i+9;
                while(a[x]!='\0'){
                    ip1+=a[x];
                    x++;
                }
                ip1+=" - ";
                }
            }         
        }
    }
    return ip1;
}

//hehe//(❁´◡`❁)//¯\_(ツ)_/¯